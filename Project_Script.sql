use electionsystem;


-- ///////////////////////////////----INNER JOIN-----////////////////////////////////////--

-- ---------used to join all the tables with more details and retrieve only the ballot nos of the voters who have voted

SELECT V.BALLOTID,V.ELECTIONID,E.ELECTIONNAME,V.CANDIDATEID,C.CANDIDATENAME,V.PARTYID,P.PARTYNAME 
FROM VOTE V INNER JOIN ELECTION E INNER JOIN CANDIDATES C INNER JOIN PARTY P
ON V.ELECTIONID=E.ELECTIONID AND V.CANDIDATEID=C.CANDIDATEID AND V.PARTYID=P.PARTYID
WHERE V.VOTESTATUS='YES'
order by electionid;

-- ----------used with count function to get total no. of votes received by each candidate in each election

select  v.electionid,e.electionname, v.candidateid, c.candidatename, p.partyname, count(v.candidateid) AS Total_Votes
from vote v INNER JOIN Candidates c INNER JOIN Election e INNER JOIN Party p
ON v.ElectionID=e.electionid AND v.CandidateID=c.candidateid AND v.partyid=p.partyid
where v.candidateid is NOT NULL AND v.VoteStatus='yes'
group by v.electionid, v.CandidateID
order by v.electionID asc, total_votes desc;


-- -------------------------------------------------won per election-------------------------------

create view voteSummary as select v.electionid,v.candidateid, count(v.candidateid) as totalvotes from vote v where v.votestatus='yes' 
group by v.electionid, v.candidateid;

select * from voteSummary order by electionid;

select t.electionid, max(t.total)as totalVote, t.candidateid from (select electionid, max(totalvotes) As Total, candidateid
from voteSummary group by candidateid, electionid) t where electionid='e02' group by t.electionid;





-- //////////////////////////------USER DEFINED FUNCTIONS-----//////////////////////////------------

-- ---------------------calculates the revenue generated by each campaign that took place

DELIMITER //
CREATE FUNCTION Income(a VARCHAR(100),b VARCHAR(100))
RETURNS varchar(100)
BEGIN
DECLARE ans VARCHAR(100);
SET ans=0;
SET ans=a-b;
RETURN ans;
END;
//

SELECT c.campaignid, c.campaignname, a.candidatename,TRUNCATE(Income(c.FundSpent,c.ReceivedDonations),2) AS INCOME_Million
FROM Campaign c
INNER JOIN candidates a
ON c.candidateid=a.candidateid
order by income_million desc;


-- ///////////////////////////----------------------VIEWS-----------------------///////////////////////////

-- --------------------------total no of votes for each candidates for each election 

CREATE VIEW Winner 
AS
SELECT v.electionid,e.electionname, v.candidateid, c.candidatename, p.partyname, count(v.candidateid) AS Total_Votes
FROM vote v INNER JOIN Candidates c INNER JOIN Election e INNER JOIN Party p
ON v.ElectionID=e.electionid AND v.CandidateID=c.candidateid AND v.partyid=p.partyid
WHERE v.candidateid is NOT NULL AND v.VoteStatus='yes'
GROUP BY v.electionid, v.CandidateID
ORDER BY v.electionID;


-- ---------------------------Winner of each election summary

CREATE VIEW Votesummary
AS
SELECT t.electionid, max(t.totalvotes) As winner_total, t.candidatename
FROM (SELECT v.electionid,c.candidatename, COUNT(v.candidateid) AS totalvotes 
FROM vote v 
INNER JOIN candidates c 
ON c.CandidateID=v.CandidateID 
WHERE v.votestatus='yes' 
GROUP BY v.electionid, v.candidateid) AS t
GROUP BY t.electionid
ORDER BY t.electionid;


-- ------------------------total no of voters per election

   CREATE VIEW totalvoters
   AS
   select v.electionid, e.electionname, count(v.ballotid) as Total_votes 
   from vote v INNER JOIN election e
   ON v.electionid=e.electionid
   where v.votestatus='yes'
   group by v.electionid
   order by v.electionid;
   
-- --------------------------complete election details   
   
  create view completeElectionSummary
   AS
   SELECT  t.electionid, t.electionname, t.total_voters, s.winner_total, s.candidatename FROM TOTALVOTERS t
  inner join 
   votesummary s on t.electionid = s.electionid;  






-- ///////////////////////////----------------------STORED PROCEDURES-----------------------///////////////////////////

Person who won a particular election

DELIMITER //
CREATE PROCEDURE electionresult(IN a varchar(60))
BEGIN
SELECT t.electionid, t.electionname, t.candidateid,t.candidatename,max(t.total)as totalVote, t.candidateid 
FROM (SELECT electionid, electionname, candidateid, candidatename, max(total_votes) AS Total
FROM Winner GROUP BY candidateid, electionid) t 
WHERE electionid = a
GROUP BY t.electionid;
END
//

CALL electionresult('e02');

-- -----------------------------revenue for each campaign

DELIMITER //
CREATE PROCEDURE campaignrevenue(IN b varchar(60))
BEGIN
SELECT c.campaignid, c.campaignname, a.candidatename,p.partyname,TRUNCATE(Income(c.FundSpent,c.ReceivedDonations),2) AS INCOME_Million
FROM Campaign c
INNER JOIN candidates a
INNER JOIN Party p
ON c.candidateid=a.candidateid AND p.partyid=a.PartyID
WHERE Campaignid= b
order by income_million desc;
END
//

CALL campaignrevenue('g');



-- --------------------------------all campaign details of a particular candidate

DELIMITER //
CREATE PROCEDURE campaigndetails(IN v varchar(60))
BEGIN
SELECT c.campaignid, c.campaignname,cm.mediaid,mm.name,c.fundspent,c.receiveddonations,TRUNCATE(Income(c.FundSpent,c.ReceivedDonations),2) AS INCOME_Million,c.managerid,m.name as Manager_Name,c.noofvolunteers,c.CandidateID,a.candidatename
FROM Campaign c
inner join candidates_uses_media cm
INNER JOIN candidates a
INNER JOIN campaignManager m
INNER JOIN media mm
ON c.candidateid=a.candidateid AND m.managerid=c.managerid AND mm.MediaID=cm.MediaID AND cm.candidateid=a.CandidateID
where c.candidateid=v
order by campaignid;
END
//

call campaigndetails(1002);



-- ////////////////////////////////-----------User Privileges-------////////

-- ---POLL WORKERS-----

CREATE USER 'john'@'localhost'
IDENTIFIED BY 'john123';
GRANT SELECT,EXECUTE ON electionsystem.*
TO 'john'@'localhost';

CREATE USER 'jack'@'localhost'
IDENTIFIED BY 'jack123';
GRANT SELECT,EXECUTE ON electionsystem.*
TO 'jack'@'localhost';


-- ----Election Admin----

CREATE USER 'gauri'@'localhost'
IDENTIFIED BY 'gauri123';

GRANT ALL on electionsystem.*
TO 'gauri'@'localhost';


select * from useraccount;




-- //////////////////------------------XML------------////////////


select concat(
'<?xml version="1.0" encoding="UTF-8" standalone="no" ?>', group_concat('<ElectionID>',electionid,'<ElectionName>',electionname,'<Total_Voters>',total_voters,'<Votes_For_Winner>',winner_total,'<Winner_Name>',candidatename)

) AS XML
from completeelectionsummary;



-- //////////////////----------------TRIGGERS-----------//////////


--------------------------fills new user creation details in session table
DELIMITER $$
CREATE TRIGGER timerabc
AFTER
INSERT ON useraccount123
FOR EACH ROW 
BEGIN
    insert into session(username,creation_date,creation_time)
    values(NEW.username,curdate(),curtime());
END$$
DELIMITER ;


---------------------------------invalid precient id is restricted in voter_info table

DELIMITER $$

CREATE TRIGGER triggervoter
BEFORE 
INSERT ON Voter_Info 
FOR EACH ROW BEGIN
    IF (NEW.precientid NOT IN (select precientid from precient)) THEN 
        SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'Warning: NO SUCH PRECIENT EXISTS';
    END IF;
END$$

DELIMITER ;









